name: Update Flashcards Data

on:
  push:
    branches:
      - main
    paths:
      - 'flashcards/**/*.pdf'

permissions:
  contents: write

jobs:
  regenerate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymupdf pillow numpy

      - name: Collect touched PDFs
        id: detect
        run: |
          set -euo pipefail
          files=$(jq -r '
            [
              .commits[]? | (.added[]?, .modified[]?)
            ]
            | flatten
            | unique
            | map(select(test("^flashcards/.*\\.pdf$")))
            | .[]?
          ' "$GITHUB_EVENT_PATH")

          if [ -z "${files}" ]; then
            echo "any=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          printf "%s\n" "${files}" > changed_pdfs.txt
          {
            echo "any=true"
            echo "list<<EOF"
            printf "%s\n" "${files}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Regenerate flashcards assets
        if: steps.detect.outputs.any == 'true'
        run: |
          python - <<'PY'
          import subprocess
          import sys
          from pathlib import Path

          changed_file = Path("changed_pdfs.txt")
          entries = [line.strip() for line in changed_file.read_text().splitlines() if line.strip()]
          if not entries:
              print("No changed PDFs to process.", file=sys.stderr)
              sys.exit(0)

          for rel_path in entries:
              pdf_path = Path(rel_path)
              if not pdf_path.exists():
                  print(f"::warning::Skipping missing {pdf_path}")
                  continue

              search_dir = pdf_path.parent
              pdfs = sorted([p.name for p in search_dir.iterdir() if p.suffix.lower() == ".pdf"])
              try:
                  index = pdfs.index(pdf_path.name) + 1
              except ValueError:
                  print(f"::error::Cannot determine selection index for {pdf_path}", file=sys.stderr)
                  sys.exit(1)

              print(f"Processing {pdf_path} (selection {index})")
              subprocess.run(
                  [sys.executable, "cartes.py", "--search-dir", str(search_dir)],
                  input=f"{index}\n",
                  text=True,
                  check=True,
              )
          PY

      - name: Commit and push updates
        if: steps.detect.outputs.any == 'true'
        run: |
          if git diff --quiet; then
            echo "No changes produced by cartes.py"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add flashcards
          git commit -m "Update flashcards assets"
          git push
